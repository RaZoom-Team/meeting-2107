from faststream.rabbit import RabbitRouter
import math

from src.application.tg.service import TelegramService
from src.application.user.rabbit import get_user
from src.application.user import UserService
from src.domain.user import UserRequest, BanUser, RabbitRequestResponse, GetUserResponse, GetUsers, VerifyUser, GetUsersResponse
from src.domain.user.repository import UserRepository
from src.infrastructure.db import CTX_SESSION
from src.infrastructure.db.tables import User


router = RabbitRouter(prefix="adm_")

@router.subscriber("ban")
async def ban_user(data: BanUser) -> RabbitRequestResponse:
    user = await get_user(data.user_id)
    if user.is_banned: return RabbitRequestResponse(success = False, error = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    await UserService().ban(user, data.reason)
    await CTX_SESSION.get().commit()
    return RabbitRequestResponse()

@router.subscriber("unban")
async def ban_user(data: UserRequest) -> RabbitRequestResponse:
    user = await get_user(data.user_id)
    if not user.is_banned: return RabbitRequestResponse(success = False, error = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    await UserService().unban(user)
    await CTX_SESSION.get().commit()
    return RabbitRequestResponse()

@router.subscriber("verify")
async def verify_user(data: VerifyUser) -> RabbitRequestResponse:
    user = await get_user(data.user_id)
    if user.verify == data.value:
        return RabbitRequestResponse(success = False, error = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" if user.verify else "–ü–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
    user.verify = data.value
    await CTX_SESSION.get().commit()
    await TelegramService().send_message(
        "‚úÖ –í–∞—à —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π" if user.verify else
        "‚õîÔ∏è –í–∞—à —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π",
        user.id
    )
    return RabbitRequestResponse()

@router.subscriber("user")
async def user(data: UserRequest) -> RabbitRequestResponse[GetUserResponse]:
    user = await get_user(data.user_id)
    return RabbitRequestResponse(
        response = GetUserResponse(
            text =
                f"<b>–ò–º—è:</b> {user.mention} <b>(<code>{user.id}</code>)</b> {'[–ù–ï–ê–ö–¢–ò–í–ï–ù]' if not user.is_active else ''}"
                f"\n<b>–ö–ª–∞—Å—Å:</b> {user.literal}"
                f"\n<b>–ü–æ–ª:</b> {'–ú—É–∂—Å–∫–æ–π' if user.male else '–ñ–µ–Ω—Å–∫–∏–π'}"
                f"\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> <i>{user.desc}</i>"
                f"\n<b>–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:</b> {'–î–∞' if user.verify else '–ù–µ—Ç'}"
                f"\n<b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:</b> {f'–î–∞ ({user.ban_reason})' if user.is_banned else '–ù–µ—Ç'}"
                f"\n<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user.created_at.astimezone().strftime("%d.%m.%Y %H:%M:%S")}",
            attachments = [attachment.url for attachment in user.attachments]
        )
    )

@router.subscriber("users")
async def users(data: GetUsers) -> RabbitRequestResponse[GetUserResponse]:
    filters = {
        "all": True,
        "banned": User.is_banned,
        "verify": User.verify,
        "male": User.male,
        "female": not User.male,
        "inactive": not User.is_active
    }
    users = await UserRepository().get_all(data.offset, data.limit, filters[data.filter])
    total = await UserRepository().count(filters[data.filter])
    if not total:
        return RabbitRequestResponse(success = False, error = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç—Å—É—Ç—Å–≤—É—é—Ç")
    return RabbitRequestResponse(
        response = GetUsersResponse(
            text = 
                f"<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</b> {math.ceil(data.offset / data.limit) + 1} / {math.ceil(total / data.limit)}\n\n"
                + '\n'.join([
                    f"{i}. {user.mention} (<code>{user.id}</code>){' üö´' if user.is_banned else ''}{' ‚úÖ' if user.verify else ''}"
                    for i, user in enumerate(users, data.offset + 1)
                ]),
            count = len(users)
        )
    )