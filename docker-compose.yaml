services:
  backend:
    build: ./backend
    container_name: mt2107_backend
    restart: unless-stopped
    expose:
      - 80
    environment:
      IS_PROD: 1
      ROOT_PATH: /api
    env_file:
      - .env
    volumes:
      - backend_data:/app/data
    depends_on:
      db:
        condition: service_healthy
        restart: true
      rabbitmq:
        condition: service_healthy
        restart: true
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://backend/system/ping || exit 1"]
      interval: 60s
      retries: 5
      start_period: 10s
      timeout: 10s

  bot:
    build: ./bot
    container_name: mt2107_bot
    restart: unless-stopped
    environment:
      IS_PROD: 1
    env_file:
      - .env
    depends_on:
      backend:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
        restart: true

  db:
    image: postgres:alpine
    container_name: mt2107_db
    command: -c 'max_connections=1000'
    volumes:
      - pgdata:/var/lib/postgresql/data/
    expose:
      - 5432
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      TZ: Europe/Moscow
      PGTZ: Europe/Moscow
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: mt2107_nginx
    restart: unless-stopped
    ports:
      - 127.0.0.1:8022:80
    volumes:
      - type: bind
        source: ./nginx.conf
        target: /etc/nginx/conf.d/default.conf
    depends_on:
      backend:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:alpine
    container_name: mt2107_rabbit
    restart: unless-stopped
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 30s
      timeout: 30s
      retries: 10

volumes:
  pgdata:
  backend_data: