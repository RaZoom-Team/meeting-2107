services:
  backend:
    build: ./backend
    container_name: mt2107_backend
    restart: unless-stopped
    expose:
      - 80
    environment:
      IS_PROD: 1
      ENABLE_METRICS: 1
      ROOT_PATH: /api
    env_file:
      - .env
    volumes:
      - backend_data:/app/data
      - "/etc/localtime:/etc/localtime:ro"
    depends_on:
      db:
        condition: service_healthy
        restart: true
      rabbitmq:
        condition: service_healthy
        restart: true
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://backend/system/ping || exit 1"]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 5s

  frontend:
    build: ./frontend
    container_name: mt2107_frontend
    restart: unless-stopped
    depends_on:
      - backend
    expose:
      - 80

  bot:
    build: ./bot
    container_name: mt2107_bot
    restart: unless-stopped
    environment:
      IS_PROD: 1
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
        restart: true
      # loki:
      #   condition: service_started
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '0.3'
    #       memory: 256M

  db:
    image: postgres:alpine
    container_name: mt2107_db
    command: -c 'max_connections=1000'
    volumes:
      - pgdata:/var/lib/postgresql/data/
      - "/etc/localtime:/etc/localtime:ro"
    expose:
      - 5432
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      TZ: Europe/Moscow
      PGTZ: Europe/Moscow
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 10s
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: mt2107_nginx
    restart: unless-stopped
    ports:
      - 127.0.0.1:8022:80
    volumes:
      - type: bind
        source: ./nginx.conf
        target: /etc/nginx/conf.d/default.conf
      - "/etc/localtime:/etc/localtime:ro"
    depends_on:
      backend:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:alpine
    container_name: mt2107_rabbit
    restart: unless-stopped
    expose:
      - 5672
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 30s
      start_period: 5s
      timeout: 5s
      retries: 3

  # prometheus:
  #   image: prom/prometheus
  #   container_name: mt2107_prometheus
  #   expose:
  #     - 9090
  #   volumes:
  #     - type: bind
  #       source: ./prometheus.yml
  #       target: /etc/prometheus/prometheus.yml
  #     - prometheus_data:/workspace
  #     - "/etc/localtime:/etc/localtime:ro"
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #   restart: unless-stopped

  # loki:
  #   image: grafana/loki
  #   container_name: mt2107_loki
  #   expose:
  #     - 3100
  #   restart: unless-stopped

  grafana:
    image: grafana/grafana
    container_name: mt2107_grafana
    ports:
      - "127.0.0.1:8023:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - "/etc/localtime:/etc/localtime:ro"
    restart: unless-stopped

volumes:
  pgdata:
  backend_data:
  grafana_data:
  prometheus_data: